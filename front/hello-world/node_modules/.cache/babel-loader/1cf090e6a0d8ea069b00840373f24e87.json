{"remainingRequest":"F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\node_modules\\babel-loader\\lib\\index.js!F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\src\\store.js","dependencies":[{"path":"F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\src\\store.js","mtime":1555950821844},{"path":"F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {// 数据保存在state内，在任何组件内通过this.$store.state.XX来读取\n    // 来自state内的数据，只能被读取不能手动修改\n  },\n  mutations: {// 用来直接修改state内的数据；在组件内，通过·this.$store.commit(方法名)来执行mutations\n    // mutations可以接受第二个参数, 可以是数字、字符串或对象类型\n    // 当一个参数不够用时，可以传入一个对象，无限扩展\n    // 作用：改变数据\n  },\n  actions: {// 提交的是mutation, 并且可以异步操作\n    // action在组件内通过this.$store.dipatch(方法名)来触发\n    // 作用：存在业务逻辑\n  },\n  getters: {// 将各个组件中的computed中的方法提取出来\n  },\n  modules: {// 用来将store分割到不同模块\n  }\n});",{"version":3,"sources":["F:\\Visual StudioCode\\VScodeSource\\job\\hello-world\\src\\store.js"],"names":["Vue","Vuex","use","Store","state","mutations","actions","getters","modules"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE,CAAK;AACA;AADL,GADqB;AAM5BC,EAAAA,SAAS,EAAE,CAAK;AACA;AACA;AACA;AAHL,GANiB;AAa5BC,EAAAA,OAAO,EAAE,CAAO;AACA;AACA;AAFP,GAbmB;AAmB5BC,EAAAA,OAAO,EAAE,CAAK;AAAL,GAnBmB;AAuB5BC,EAAAA,OAAO,EAAE,CAAK;AAAL;AAvBmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {    // 数据保存在state内，在任何组件内通过this.$store.state.XX来读取\n              // 来自state内的数据，只能被读取不能手动修改\n\n  },\n  \n  mutations: {    // 用来直接修改state内的数据；在组件内，通过·this.$store.commit(方法名)来执行mutations\n                  // mutations可以接受第二个参数, 可以是数字、字符串或对象类型\n                  // 当一个参数不够用时，可以传入一个对象，无限扩展\n                  // 作用：改变数据\n\n  },\n  \n  actions: {      // 提交的是mutation, 并且可以异步操作\n                  // action在组件内通过this.$store.dipatch(方法名)来触发\n                  // 作用：存在业务逻辑\n\n  },\n\n  getters: {    // 将各个组件中的computed中的方法提取出来\n\n  },\n\n  modules: {    // 用来将store分割到不同模块\n\n  }\n\n\n})\n"]}]}